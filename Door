import java.util.Arrays;

public class Door extends MapElement
{    
    private int doorID;
    private boolean isLocked = true;  
    private boolean isOpen = true;
    private static String name = "door";
    
    public Door(Material type, int doorID, boolean isLocked, boolean isOpen, String name) {
        super(type,false,false,name);
        this.doorID = doorID;
        this.isLocked = isLocked;
        this.isOpen = isOpen;
        
        String[] tempActionList = {"open","close","lock","unlock","break"};
        setActionList(tempActionList);
    }
    
    public Door() {
        // creates a closed, unlocked door.
        super(new Material("wood"),false,false,"door");
        doorID = Key.numberOfKeys;
        isLocked = false;
        isOpen = false;

        String[] tempActionList = {"open","close","lock","unlock","break"};
        setActionList(tempActionList);
    }

    public Door(Door other) {
        super(other.getType(),other.getTakeable(),other.getIsBroken(),other.getName());
        doorID = other.getID();
        isLocked = other.getIsLocked();
        isOpen = other.getIsOpen();
        name = other.getName();
        setActionList(other.getActionList());
    }
    
    public boolean use(String action) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                return false;
            case 0:
                open();
                return true;
            case 1:
                close();
                return true;
            case 2:
                System.out.println("You need to use a key to unlock the door.");
                return true;
            case 3:
                System.out.println("You need to use a key to unlock the door.");
                return true;
            case 4:
                smash();
                return true;
        }
        return false;
    }
    
    public boolean use(String action, MapElement tool) {
        int index = actionIndexOf(action);
        switch(index) {
            case -1:
                // should there be something here?
                return false;
            case 0:
                open();
                return true;
            case 1:
                close();
                return true;
            case 2:
                lock(tool);
                return true;
            case 3:
                unlock(tool);
                return true;
            case 4:
                smash(tool);
                return true;
        }
        return false;
    }
    
    public void open() {
        if (isLocked) {
            System.out.println("The door is locked.");
        }
        else if (isOpen) {
            System.out.println("The door is already open.");
        }
        else {
            isOpen = true;
            System.out.println("You open the door.");
        }
    }

    public void close() {
        isOpen = false;
        if (!isOpen) {
            System.out.println("The door is already closed.");
        }
        else {
            isOpen = false;
            System.out.println("You close the door.");
        }
    }

    public void unlock(MapElement key) {
        if (key.getID() == doorID) {
            if (isLocked) {
                isLocked = false;
                System.out.println("You unlock the door.");
            }
            else {
                System.out.println("The door is already unlocked.");
            }
        }
        else {
            System.out.println("You try to put the key in the lock, but it doesn't fit the door.");
        }
    }

    public void lock(MapElement key) {
        if (key.getID() == doorID) {
            if (isLocked == false) {
                isLocked = true;
                System.out.println("You lock the door.");
            }
            else {
                System.out.println("The door is already locked.");
            }
        }
        else {
            System.out.println("You try to put the key in the lock, but it doesn't fit the door.");
        }
    }

    public void smash() {
        if (getType().getStrength() < 10) {
            destroy();
            isOpen = true;
            System.out.println("You break the door down with your fists.");
        }
    }

    public void smash(MapElement item) {
        if (getType().getStrength() < item.getType().getStrength()) {
            destroy();
            isOpen = true;
            System.out.println("You break the door down with " + item + ".");
        }
        else {
            System.out.println("You try to break down the door with " + item + ", but the door won't break.");
        }
    }
    
    public int getID() {
        return doorID;
    }
    
    public boolean getIsOpen() {
        return isOpen;
    }
    
    public String toString() {
        return super.toString() + "\nLocked: " + isLocked + ". Open?" + isOpen + ".";
    }
}
