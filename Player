import java.util.Scanner;

public class Player
{
    public static int x = 0, y = 0;
    public static Map room1;
    public static Inventory inventory;
    public static String[] directions = {"north", "east", "south", "west"};
    
    public static void main() {
        inventory = new Inventory();
        room1 = new Map();
        Scanner kb = new Scanner(System.in);
        String input;
        do{
            System.out.print(">");
            input = kb.nextLine().toLowerCase();    
            if (!processText(input)) {
                System.out.println("Sorry, you can't " + input + ".\n");
            }
        } while (input.compareTo("quit") != 0);
    }
    
    public static boolean processText(String input) {
        input = input.toLowerCase();
        int position = input.indexOf(' ');
        // ^first used to find the location of the space
                
        if (position < 1) {// any single-word commands should go here
            if (input.compareTo("look") == 0) {
                System.out.println(room1.mapArray[y][x]);
                return true;
            }
            else if (input.compareTo("inventory") == 0) {
                System.out.println(inventory);
                return true;
            }
            else {
                return false;
            }
        }
        
        if (input.indexOf("pick up") > -1) {
            position = input.indexOf(' ', position+1);
            return pickUp(input.substring(position+1));
        }
        
        String actionString = input.substring(0,position);
        String objectString = input.substring(position+1);
        
        // if the action is to move
        if (actionString.compareTo("move") == 0) {
            return move(objectString);
        }
        else if (actionString.compareTo("check") == 0) {
            // check if the object is in 
            MapElement object = findObject(objectString);
            if (object!= null) {
                System.out.println(object);
                return true;
            }
            return false;
        }
        
        position = objectString.indexOf("with");
        // position is now used for finding position of "with"
        boolean hasTool = (position > -1);
        MapElement tool = null;
        // finding a tool, if there is one
        if (hasTool) {
            tool = inventory.findItem(objectString.substring(position+5));
            
            if (tool != null) {
                objectString = objectString.substring(0,position-1);
            }
            else {
                return false;
            }
        }
        
        // for normal actions
        MapElement object = findObject(objectString);
        if (object != null) {
            if (hasTool) {
                return object.use(actionString,tool);
            }
            else {
                return object.use(actionString);
            }
        }  
        else {
            return false;
        }
    }
    
    public static MapElement findObject(String objectString) {
        MapElement object = room1.mapArray[y][x].findElement(objectString);
        if (object == null) {
            object = inventory.findItem(objectString);
        }
        if (object == null) {
            object = analyzeDoorString(objectString);
        }
        return object;
    }
    
    public static boolean pickUp(String objectName) {
        MapElement object = room1.mapArray[y][x].findElement(objectName);
        if (object != null && object.getTakeable()) {
            inventory.add(object);
            room1.mapArray[y][x].remove(object);
            System.out.println("You pick up the " + object.getName() + ". ");
            return true;
        }
        return false;
    }
    
    public static boolean move(String direction) {
        boolean haveMoved = false;
        if (direction.compareTo("north") == 0) {
            if (y>0 && (room1.mapArray[y][x].canPass(0))) {
                y--;
                haveMoved = true;
            }
            else {
                haveMoved =  false;
            }
        }
        else if (direction.compareTo("west") == 0) {
            if (x>0 && (room1.mapArray[y][x].canPass(3))) {
                x--;
                haveMoved =  true;
            }
            else {
                haveMoved =  false;
            }
        }
        else if (direction.compareTo("south") == 0) {
            if (y<room1.mapArray.length-1 && (room1.mapArray[y][x].canPass(2))) {
                y++;
                haveMoved =  true;
            }
            else {
                haveMoved =  false;
            }
        }
        else if (direction.compareTo("east") == 0) {
            if (x<room1.mapArray[0].length-1 && (room1.mapArray[y][x].canPass(1))) {
                x++;
                haveMoved =  true;
            }
            else {
                haveMoved =  false;
            }
        }

        System.out.println("x: " + x + ", y: " + y);
        
        if (haveMoved) {
            System.out.println(room1.mapArray[y][x]);
            return true;
        }
        return false;
    }
    
    public static Door analyzeDoorString(String objectString) {
        int position = objectString.indexOf("door");
        position = objectString.lastIndexOf(' ',position); 
        // ^this means that door has a modifier before it, like "east door"
        if (position < 0) { // if there is no modifier
            /* We don't want this functionality any more, so they have to specify WHICH door.
            // pick the first available door
            int doorDir = room1.mapArray[y][x].findDoor(0);
            // finds the first available door in the room, if no doors available return null
            if (doorDir > -1) {
                return room1.mapArray[y][x].getDoor(doorDir);
            }
            else {
                return null;
            } */
            return null;
        }
        else { // if there is a modifier, find out what it is. invalid modifiers return null.
            String modifier = objectString.substring(0,position);
            for (int i = 0; i < 4; i++) { 
                // if the modifier is a direction (ex. "east door")
                if (modifier.compareTo(directions[i]) == 0) {
                    return room1.mapArray[y][x].getDoor(i);
                    // keep in mind this can still be null
                }

                // if the modifier is a specific door (ex. "red door")
                if (room1.mapArray[y][x].getDoor(i) != null && 
                    room1.mapArray[y][x].getDoor(i).getName().compareToIgnoreCase(objectString) == 0) {
                    return room1.mapArray[y][x].getDoor(i);
                }
            }
            return null;
        }
    }
}
